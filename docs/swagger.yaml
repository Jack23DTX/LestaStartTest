definitions:
  internal_controllers.AuthRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  internal_controllers.ChangePasswordRequest:
    properties:
      new_password:
        type: string
    type: object
  internal_controllers.CreateCollectionRequest:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  internal_controllers.DocumentResponse:
    properties:
      content:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
info:
  contact: {}
  description: Сервис для загрузки документов, подсчёта TF‑IDF и управления коллекциями.
  title: LestaStartTest API
  version: 2.2.1
paths:
  /api/collection/{collection_id}/{document_id}:
    delete:
      description: Убирает документ из коллекции и обновляет IDF.
      parameters:
      - description: ID коллекции
        in: path
        name: collection_id
        required: true
        type: integer
      - description: ID документа
        in: path
        name: document_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"message":"Document removed from collection"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Collection or Document not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to remove document or update IDF
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Удаление документа из коллекции
      tags:
      - Коллекции
    post:
      description: Присоединяет документ к коллекции и обновляет IDF.
      parameters:
      - description: ID коллекции
        in: path
        name: collection_id
        required: true
        type: integer
      - description: ID документа
        in: path
        name: document_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"message":"Document added to collection"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Collection or Document not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to add document or update IDF
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Добавление документа в коллекцию
      tags:
      - Коллекции
  /api/collections:
    get:
      description: Возвращает все коллекции пользователя.
      produces:
      - application/json
      responses:
        "200":
          description: '{"collections":[]map[string]interface{}}'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Database error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Список коллекций
      tags:
      - Коллекции
    post:
      consumes:
      - application/json
      description: Создаёт новую коллекцию для пользователя.
      parameters:
      - description: Данные коллекции
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/internal_controllers.CreateCollectionRequest'
      produces:
      - application/json
      responses:
        "201":
          description: '{"id":int,"name":string}'
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to create collection
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Создание коллекции
      tags:
      - Коллекции
  /api/collections/{id}:
    delete:
      description: Удаляет коллекцию и все связанные IDF.
      parameters:
      - description: ID коллекции
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"message":"Collection deleted"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Collection not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to delete collection or related data
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Удаление коллекции
      tags:
      - Коллекции
    get:
      description: Возвращает коллекцию и список её документов.
      parameters:
      - description: ID коллекции
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"id":int,"name":string,"documents":[]map[string]interface{}}'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Collection not found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Получение коллекции по ID
      tags:
      - Коллекции
  /api/collections/{id}/statistics:
    get:
      description: Рассчитывает TF‑IDF внутри всех документов коллекции.
      parameters:
      - description: ID коллекции
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"collection_id":int,"statistics":map[string]object}'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Collection not found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: TF‑IDF статистика коллекции
      tags:
      - Коллекции
  /api/documents:
    get:
      description: Возвращает все документы текущего пользователя.
      produces:
      - application/json
      responses:
        "200":
          description: '{"documents":[]DocumentResponse}'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Database error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Список документов
      tags:
      - Документы
  /api/documents/{id}:
    delete:
      description: Удаляет документ, все связи и физический файл.
      parameters:
      - description: ID документа
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"message":"Document deleted"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Document not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to delete document
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Удаление документа
      tags:
      - Документы
    get:
      description: Возвращает имя и содержимое документа по его ID.
      parameters:
      - description: ID документа
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_controllers.DocumentResponse'
        "404":
          description: Document not found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Получение документа
      tags:
      - Документы
  /api/documents/{id}/huffman:
    get:
      description: Возвращает закодированное представление содержимого документа.
      parameters:
      - description: ID документа
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"document_id":int,"huffman_encoded":string}'
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid document ID or content too large
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Document not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Encoding failed
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Кодирование документа алгоритмом Хаффмана
      tags:
      - Документы
  /api/documents/{id}/statistics:
    get:
      description: Рассчитывает TF‑IDF слова внутри всех коллекций, где есть этот
        документ.
      parameters:
      - description: ID документа
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"document_id":int,"statistics":map[string]object}'
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Document is not in any collection
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Document not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to find collections
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: TF‑IDF статистика документа
      tags:
      - Документы
  /api/documents/upload:
    post:
      consumes:
      - multipart/form-data
      description: Загружает один или несколько файлов, обрабатывает и сохраняет их.
      parameters:
      - collectionFormat: multi
        description: Файлы для загрузки
        in: formData
        items:
          type: file
        name: files
        required: true
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: '{"message":string,"data":UploadResult}'
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Error getting files or no files uploaded
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: '{"errors":[]string}'
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Загрузка файлов
      tags:
      - Документы
  /api/logout:
    get:
      description: Завершает сессию пользователя (удаляет куки).
      produces:
      - application/json
      responses:
        "200":
          description: '{"message":"Logged out"}'
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Выход из аккаунта
      tags:
      - Пользователь
  /api/metrics:
    get:
      description: Возвращает общее число обработанных документов и среднее время
        обработки (нс).
      produces:
      - application/json
      responses:
        "200":
          description: Application metrics
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Метрики обработки документов
      tags:
      - Системные
  /api/status:
    get:
      description: Проверяет, что сервис запущен.
      produces:
      - application/json
      responses:
        "200":
          description: Application is running
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Статус приложения
      tags:
      - Системные
  /api/version:
    get:
      description: Возвращает значение переменной окружения VERSION.
      produces:
      - application/json
      responses:
        "200":
          description: Application version
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Текущая версия приложения
      tags:
      - Системные
  /login:
    post:
      consumes:
      - application/json
      description: Проверяет учётные данные и возвращает JWT‑токен.
      parameters:
      - description: Данные для аутентификации
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/internal_controllers.AuthRequest'
      produces:
      - application/json
      responses:
        "200":
          description: '{"message":string,"token":string}'
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request body
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Invalid credentials
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Аутентификация пользователя
      tags:
      - Пользователь
  /register:
    post:
      consumes:
      - application/json
      description: Создаёт нового пользователя и возвращает JWT‑токен.
      parameters:
      - description: Данные для регистрации
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/internal_controllers.AuthRequest'
      produces:
      - application/json
      responses:
        "200":
          description: '{"message":string,"token":string}'
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: User already exists
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Регистрация пользователя
      tags:
      - Пользователь
  /user/{user_id}:
    delete:
      description: Удаляет пользователя, его документы и коллекции.
      parameters:
      - description: ID пользователя
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"message":"User deleted"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Удаление пользователя
      tags:
      - Пользователь
    patch:
      consumes:
      - application/json
      description: Обновляет пароль текущего пользователя.
      parameters:
      - description: ID пользователя
        in: path
        name: user_id
        required: true
        type: integer
      - description: Новый пароль
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/internal_controllers.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: '{"message":"Password updated"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Password update failed or database error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Изменение пароля пользователя
      tags:
      - Пользователь
schemes:
- http
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
